#include <stdio.h>
#include <limits.h>
#define N 4
int sum(int freq[], int i, int j) {
    int total = 0;
    for (int k = i; k <= j; k++)
        total += freq[k];
    return total;
}
int optimalBST(int keys[], int freq[], int n) {
    int cost[N][N]; // Table to store results of subproblems
    for (int i = 0; i < n; i++)
        cost[i][i] = freq[i];
    for (int length = 2; length <= n; length++) {
        for (int i = 0; i <= n - length; i++) {
            int j = i + length - 1;
            cost[i][j] = INT_MAX;
            for (int r = i; r <= j; r++) {
                int c = ((r > i) ? cost[i][r - 1] : 0) +
                        ((r < j) ? cost[r + 1][j] : 0) +
                        sum(freq, i, j);

                if (c < cost[i][j])
                    cost[i][j] = c;
            }
        }
    }

    return cost[0][n - 1];
}

int main() {
    int keys[N] = {10, 20, 30, 40};
    int freq[N] = {4, 2, 6, 3}; // Frequencies of keys

    int minCost = optimalBST(keys, freq, N);
    printf("Cost of Optimal BST is: %d\n", minCost);

    return 0;
}
