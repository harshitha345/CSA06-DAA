#include <stdio.h>
#include <limits.h>

#define N 4  // Number of cities

int tsp(int dist[N][N], int pos, int visited, int dp[N][1<<N]) {
    // If all cities have been visited, return to the starting city
    if (visited == (1 << N) - 1) {
        return dist[pos][0]; // Return to start city
    }

    // If this subproblem has already been solved, return the stored result
    if (dp[pos][visited] != -1) {
        return dp[pos][visited];
    }

    int minCost = INT_MAX;

    // Try to visit all the unvisited cities and choose the minimum cost
    for (int city = 0; city < N; city++) {
        if ((visited & (1 << city)) == 0) {  // If city has not been visited
            int newCost = dist[pos][city] + tsp(dist, city, visited | (1 << city), dp);
            if (newCost < minCost) {
                minCost = newCost;
            }
        }
    }

    // Store the result in dp array and return it
    return dp[pos][visited] = minCost;
}

int main() {
    int dist[N][N] = {
        {0, 10, 15, 20},
        {10, 0, 35, 25},
        {15, 35, 0, 30},
        {20, 25, 30, 0}
    };

    int dp[N][1<<N];  // DP table to store intermediate results

    // Initialize dp array with -1
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < (1 << N); j++) {
            dp[i][j] = -1;
        }
    }

    // Start the TSP from city 0 with only the starting city visited
    printf("Minimum cost of TSP: %d\n", tsp(dist, 0, 1, dp));

    return 0;
}
