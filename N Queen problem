#include <stdio.h>
#define N 4  // You can change N for a larger board

// Function to print the solution
void printSolution(int board[N][N]) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) {
            printf("%d ", board[i][j]);
        }
        printf("\n");
    }
}

// Utility function to check if a queen can be placed at board[row][col]
int isSafe(int board[N][N], int row, int col) {
    int i, j;

    // Check this row on the left side
    for (i = 0; i < col; i++)
        if (board[row][i])
            return 0;

    // Check upper diagonal on the left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return 0;

    // Check lower diagonal on the left side
    for (i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return 0;

    return 1;
}

// Recursive function to solve N-Queens problem using backtracking
int solveNQUtil(int board[N][N], int col) {
    // If all queens are placed, return true
    if (col >= N)
        return 1;

    // Try placing this queen in all rows one by one
    for (int i = 0; i < N; i++) {
        // Check if queen can be placed on board[i][col]
        if (isSafe(board, i, col)) {
            // Place the queen
            board[i][col] = 1;

            // Recursively place the rest of the queens
            if (solveNQUtil(board, col + 1))
                return 1;

            // If placing queen in board[i][col] doesn't lead to a solution
            // Backtrack: remove the queen from board[i][col]
            board[i][col] = 0;
        }
    }

    // If the queen cannot be placed in any row in this column, return false
